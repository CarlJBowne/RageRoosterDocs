{
    "/RageRoosterDocs/": {
        "title": "Home",
        "text": "RAGE ROOSTER : FOWL CARNAGE Official Documentation, for use by Lab 165, Rage Rooster : Fowl Carnage team members. If seen by anyone else, please ignore. Made with  tiledocs.com ."
    },
    "/RageRoosterDocs/documentation/player-systems/player/": {
        "title": "Player",
        "text": "Player A global Singleton representing the Player entity in the game. Provides static access to commonly used components and systems related to the player. Base Type:  MonoBehaviour Nested Types:  Health ,  Ammo ,  Currency Static Fields Exists Type:  bool Whether the  Player  entity has been loaded into the world.  (Not to be confused with  Active , which denotes when the player's activity has been paused.) Active Type:  bool Whether the  Player  entity is currently active and able to interact with the game world.  (Not to be confused with  Exists  which is whether the Player entity has been loaded in the world.) GameObject Type:  GameObject The Root  GameObject  of the  Player . Transform Type:  Transform The Root  Transform  of the Player. StateMachine Type:  PlayerStateMachine The  PlayerStateMachine  component attached to the  Player . Handles the player's state transitions and logic. MovementBody Type:  PlayerMovementBody The  PlayerMovementBody  component attached to the  Player . Handles movement and physics interactions. Collider Type:  CapsuleCollider The  CapsuleCollider  component attached to the  Player . Controller Type:  PlayerController The  PlayerController  component attached to the  Player . Handles player input and control. Ranged Type:  PlayerRanged The  PlayerRanged  component attached to the  Player . Handles ranged combat mechanics. Interacter Type:  PlayerInteracter The  PlayerInteracter  component attached to the  Player . Handles interact functionality. Animator Type:  Animator The Animator component attached to the  Player . Audio Type:  AudioCaller The AudioCaller component attached to the  Player . Handles One-Time Sound emission from the Player. RagdollHandler Type:  RagdollHandler The RagdollHandler component attached to the  Player . Position Type:  Vector3 The current world position of the  Player . (At Feet.) Center Type:  Vector3 The current world position of the center of the Player's CapsuleCollider. Rotation Type:  Quaternion The current Rotation of the  Player  as a Quaternion. Forward Type:  Vector3 The current Forward Vector of the  Player . EularAngles Type:  Vector3 The current Rotation of the  Player  in Euler Angles. onRespawn Type:  Action A callback invoked when the  Player  respawns. (Possibly Obsolete?) Static Methods DistanceFrom(Vector3 pos) Returns:  float  The distance between the  Player  and a given position, such as an enemy. Parameters Vector3  : pos   The position to be compared. SetActive(bool active) Returns:  void Sets the active state of the  Player .  (Probably should be expanded later to allow a paused-but-still-visible state and whatnot) Parameters bool  : active Whether to set the Player active or inactive. InstantMove(Vector3 newPosition, float? yRot = null) Returns:  void Instantly moves the  Player  to a new position, optionally setting a new Y rotation. Parameters Vector3  : newPosition  The target position. float?  : yRot = null  An optional parameter for setting the Y rotation. Death(bool) Returns:  void Begins the Player death sequence, also used for falling down pits which merely results in 1 lost health and a respawn. Parameters bool  : justPit = false If it is just a pit. Public Methods Awake() Returns:  void Awake stage of the  Player , saving the static references and other setup. Nested Types Health The Model part of the MVC pattern for Player Health, not to be confused with PlayerHealth or UIHUDSystem. Initialize() Current Type:  int Max Type:  int updateHealth Type:  Action updateMaxHealth Type:  Action Ammo The Model part of the MVC pattern for Player Ammo, not to be confused with PlayerRanged or UIHUDSystem. Initialize() Current Type:  int Max Type:  int updateAmmo Type:  Action updateMaxAmmo Type:  Action Currency The Model part of the MV pattern for Player Ammo, not to be confused with UIHUDSystem. Initialize() Current  Type:  int updateCurrency  Type:  Action"
    },
    "/RageRoosterDocs/documentation/room-folder/overview/": {
        "title": "Overview",
        "text": "Room System Areas and Rooms The Room System is the system by which  Rage Rooster  uses to divide and manage the game world. The World is divided into Areas, which are then divided into Rooms. During gameplay, one Area will be loaded at a time, while many Rooms can be loaded if they are within range of the player.  Areas and Rooms are defined in Asset-Space via the  RoomAsset  and  AreaAsset  ScriptableObjects. Asset vs Scene space. See the  Terminology  page if these terms are unclear. Each  AreaAsset  in the project should be included in the  AreaRegistry , so they can be accessed by the  Save System  via a string ID. Each  RoomAsset  also has to be registered to an  AreaAsset  for it to be loadable. Each Area and Room has a Scene associated with it to load it into Gameplay. Attached to the root GameObject of these scenes are scripts to manage the Area and Root in Scene-Space.  RoomRoot  and  AreaRoot . All Assets regarding Areas and Rooms are found in the  World  folder under the following folder layout. * World \t * Areas \t \t * AreaFlags * Rooms Creating New Ones. In the  File  menu a set of commands are provided to create a new Area or a new Room. The user will be asked for a name and a target area if creating a room. All the necessary files, scenes, and connections will be created automatically in the designated folders. Flags Each Area should have an associated instance of  SavedFlagSet  saved in the  AreaFlags  folder to define the Flags that exist in that area and their default values. See the  SavedFlagSet  page for more information. Room Manager Rooms and Areas are managed during gameplay by the  RoomManager  along with Area-to-Area transitions."
    },
    "/RageRoosterDocs/documentation/room-folder/assets/room/": {
        "title": "RoomAsset",
        "text": "RoomAsset A Development-Time Asset defining a Room in the game world. Asset Guide Area. - The Area owning this RoomAsset. (Clickable) Display Name. - The name used to display the room in UI. Scene - The Scene containing the in-game content of the room. LOD - the secondary Level of Detail to load when the player is near but not near enough to load. Range - The range at which to load the LOD. Prefab - The Prefab Asset to instantiate the LOD from. Instance - The active instance of the LOD if running in game. Entrances. - The defined places in the world the player can pass to officially enter the area, also used to determine when the room should load via individual distance calculations. (If the player is within a radius of any Entrance in the list, it will count.) Point - The exact position in constant world space of the Entrance. Direction - The intended inward direction of the Entrance. (If the player is on that side of it, the Entrance will be ignored.) Load Radius - The radius that when the player is within the room should load. Unload Radius - The radius that when the player is outside the room should unload. Lod Radius - The radisu that when the Player is within the room should load its secondary LOD. Scripting Reference Base Type:  ScriptableObject    Nested Types:  RoomLOD Public Fields displayName Type:  string   (protected readonly)    The Display name for the room. Used in UI for denoting Save File location.    area Type:  AreaAsset   (protected readonly)    The Area Asset this Room is a part of.    globalCenter Type:  Vector3   (protected readonly)    Obsolete. Not necessary.    scene Type:  SceneReference   (protected readonly)    The Scene Asset containing the contents of this Room.    lod Type:  RoomLOD   (protected readonly)    Level-of-Detail configuration for the room.    entrances Type:  List < RoomEntrance . Data >  (protected readonly)    The list of Entrance points into this room. The Player's position to these entrances is compared every few frames to determine when to load/unload the room.    root_ Type:  RoomRoot   (protected readonly)    The Active  RoomRoot  attached to the scene.    Note: There is no _ at the end, TileDocs does weird stuff with this keyword state Type:  RoomState   (protected readonly)    The current working state of this room.    currentLOD Type:  int   (protected readonly)    The current ID of the LOD instance being shown. Currently only supports one LOD level.    Public Methods Connect( RoomRoot )   Establishes a connection to the specified room root.    Parameters RoomRoot  : root  The  RoomRoot  instance representing the room to connect to. Cannot be null.    PrepEnter() Returns:   IEnumerator    Prepares this specific room as the end-destination of the current transfer.    PrepSurrounding() Returns:   IEnumerator    Prepares this room as a room in the target area of the current transfer. If the player is within load range, fully loads the room.    SceneLoad() Returns:   IEnumerator    Loads the full scene for this room.    SceneUnload() Returns:   IEnumerator    Unloads the full scene for this room.    CompleteUnload() Returns:   IEnumerator    Completely unloads this room, including both the scene and any LOD instances."
    },
    "/RageRoosterDocs/documentation/room-folder/assets/areaasset/": {
        "title": "AreaAsset",
        "text": "AreaAsset A Development-Time Asset defining an Area in the game world. Asset Guide Display Name -  The name used to display the area in UI. Shell Scene -  The Scene containing a basic shell of the area, functioning as a 0th level-of-detail for every room in the area. Rooms -  The list of  RoomAsset s registered to be a part of this Area. Music -  The default music to play while in this area.  Flag Defaults -  The dev-defined default flags for this area. These are cloned into the active  SaveData  when a new game is started. Scripting Reference Base Type:  ScriptableObject    Public Fields displayName Type:  string   (protected readonly) *The Display Name of this Area, used in UI for denoting Save File location.   Defaults to \"INSERT_DISPLAY_NAME\".* shellScene Type:  SceneReference   (protected readonly) The Scene containing a basic shell of the area, functioning as a 0th level-of-detail for every room in the area. rooms Type:  List<RoomAsset>   (protected readonly) The  RoomAsset s that make up this Area. music Type:  EventReference   (protected readonly) The default music to play while in this area. flagDefaults Type:  SavedFlagSet   (protected readonly) The dev-defined default flags for this area. These are cloned into the active  SaveData  when a new game is started. Public Methods LoadArea() Returns:  IEnumerator   Loads this area's  shellScene  and prepares all rooms for use. Returns control once finished loading. Connect( AreaRoot  root) Returns:  void   Establishes a connection to the specified  AreaRoot  by assigning it to the  root  property. Parameters AreaRoot  : root The  AreaRoot   instance to attach to this  AreaRoot   . UnloadArea() Returns:  IEnumerator   Unloads this area's  shellScene  and all rooms within it. Returns control once finished unloading."
    },
    "/RageRoosterDocs/documentation/room-folder/assets/arearegistry/": {
        "title": "AreaRegistry",
        "text": "AreaRegistry A global registry asset of all  AreaAsset s in the project. Used to access  AreaAsset s at runtime by name or all at once. Base Type:  SingletonAsset<AreaRegistry> Static Methods GetArea(string) Returns:   AreaAsset    Get an area in the registry by name. Parameters string  : name GetAll() Returns:    AreaAsset []    Returns All areas in the registry. Editor_AddArea(  AreaAsset )  Adds an   AreaAsset  to the registry asset.  EDITOR ONLY. Parameters AreaAsset   : area  The  AreaAsset  to add to the registry asset."
    },
    "/RageRoosterDocs/documentation/room-folder/objects/roomroot/": {
        "title": "RoomRoot",
        "text": "# AreaRoot AreaRoot *The Root component for an Area. Attached to the root  GameObject  of a  RoomAsset .scene    If a Room is created via the File/CreateRoom button, this component is automatically setup.* Base Type:  MonoBehaviour Remarks If the Gameplay System is not active and this Script is loaded, it will begin the Gameplay Initialization process with this Room as its target starting point. The 1st SpawnPoint belonging to this Room will be loaded into unless the Debug SaveFile on the Developer's disk has a different Room recorded as the last active Room. Public Fields asset Type:  RoomAsset   (protected readonly)    The   RoomAsset  associated with this instance.    spawns Type:  SpawnPoint []   (protected readonly)    The defined   SpawnPoint s available in this room.    Automatically populated upon saving the scene in the editor."
    },
    "/RageRoosterDocs/documentation/room-folder/objects/arearoot/": {
        "title": "AreaRoot",
        "text": "AreaRoot The Root component for an Area. Attached to the root  GameObject  of an  AreaAsset .shellScene    If an Area is created via the File/CreateRoom button, this component is automatically setup. Base Type:  MonoBehaviour Remarks If the Gameplay System is not active and this Script is loaded, it will begin the Gameplay Initialization process with this Area as its target starting point. The 1st Room belonging to this Area will be loaded into unless the Debug SaveFile on the Developer's disk has a different Room recorded as the last active Room. Public Fields asset Type:  AreaAsset   (protected readonly)    The  AreaAsset  associated with this instance."
    },
    "/RageRoosterDocs/documentation/room-folder/objects/roomentrance/": {
        "title": "RoomEntrance",
        "text": "RoomEntrance An entrance to a Room. MonoBehaviour that triggers entering the room when colliding with the Player.   A pure-data representation,  RoomEntrance.Data  is stored in a  RoomAsset  for runtime loading. (See Below) Base Type: MonoBehaviour   Nested Types: Data Public Fields loadRadius Type:  float    The distance radius at which the room will begin loading.    unloadRadius Type:  float    The distance radius at which the room will unload.    lodRadius Type:  float    The distance radius at which the room's LOD will be loaded.    direction Type:  Vector3    The direction of the entrance inward into the room. If the player is on the near side of this transition it will not trigger loading nor entering the room.    spawnPoint Type:  SpawnPoint    An optional   SpawnPoint  this entrance can set the player's respawn location to when entered.    forDeathOnly Type:  bool    Whether the  spawnPoint  should only be set on death reloads, and not normal transitions.    Public Methods OnTriggerEnter(Collider other) Returns:  void   Called by Unity when another collider enters this trigger. If the collider belongs to the Player, the room is entered and the optional spawn location is applied to the active save data. Parameters Collider  : other     The collider that entered the trigger. If not equal to the player's collider the method returns immediately.    GetData() Returns:   Data    Create and return a  Data  instance representing this entrance for serialization into a  RoomAsset  The returned data includes world-space point, transformed direction, and the load/unload/LOD radii. Parameters (none)    Data - Nested Type Type:  struct    Packaged data about this entrance to be saved into a  RoomAsset . Public Fields: Vector3  point   The world-space position of the entrance. Vector3  direction     The world-space inward direction of the entrance. float  loadRadius   Radius at which the room will begin loading. float  unloadRadius   Radius at which the room will unload. float  lodRadius   Radius at which the room's LOD will be loaded."
    },
    "/RageRoosterDocs/documentation/room-folder/objects/spawnpoint/": {
        "title": "SpawnPoint",
        "text": "SpawnPoint A set point in the world where the player can spawn.   When activated it moves the player to the exact transform position. Base Type: MonoBehaviour   Public Fields ID Type:  int    The ID of this  SpawnPoint  within the Room it belongs to.    rotate Type:  bool    Whether the player should rotate to the forward direction of the  SpawnPoint  when spawned.    snapToFloor Type:  bool    Whether the player should snap downwards to the nearest floor when spawned (uses a downward Physics.Raycast).    Public Methods SpawnPlayerAt() Returns:  void   Places the player at this  SpawnPoint 's position. If  snapToFloor  is true a downward physics raycast is performed and the hit point is used. If  rotate  is true the player's yaw is set to the  SpawnPoint 's forward rotation. Parameters    None   GetDestination() Returns:   Destination    The  Destination  this  SpawnPoint  corresponds to. The returned  Destination  has  room  set to this instance's  root.asset  and  spawnID  set to this instance's  ID . Parameters    None"
    },
    "/RageRoosterDocs/documentation/room-folder/roommanager/": {
        "title": "RoomManager",
        "text": "RoomManager Global Gameplay System for managing Room transitions, current Room/Area tracking, and related functionality. Base Type: SingletonMonoBasic<RoomManager>   Nested Types: TransitionData Static Fields currentArea Type:  AreaAsset   (readonly) The Currently active Area in the game world. currentRoom Type:  RoomAsset   (readonly) The Room the player is currently located in. currentlyTransitioning Type:  bool If the game is currently in the process of transitioning between Rooms/Areas. destination Type:  Destination The target Destination for the next Room transition. forceFullTransition Type:  bool Manual override to force a full Deload & Load transition even if to/from the same area or room. PreFadeOutAction Type:  Action A callback Action invoked before the  FadeOutRoutine  begins. FadeOutRoutine Type:  IEnumerator The  IEnumerator  routine that performs the Fade Out animation. PostFadeOutAction Type:  Action A callback Action invoked after the  FadeOutRoutine  completes. MidTransitionRoutine Type:  IEnumerator An  IEnumerator  routine that runs in the middle of the transition, after unloading/loading but before Fade In. PreFadeInAction Type:  Action A callback Action invoked before the  FadeInRoutine  begins and after the  MidTransitionRoutine . FadeInRoutine Type:  IEnumerator The  IEnumerator  routine that performs the Fade In animation. PostFadeInAction Type:  Action A callback Action invoked after the  FadeInRoutine  completes. Static Methods StartTransition(Destination) Returns:  void   Begins a Room transition to the specified  Destination . Parameters Destination  : destination =  default      The destination to transition to. If unspecified the manager will resolve a valid destination from its stored fields or save data. Transition(Destination) Returns:   IEnumerator    The central Transition Routine run when the player transitions between Rooms/Areas. Handles fade out/in, area unload/load, room preparation, player spawn, music fading, and saving location when required. Parameters Destination  : destination =  default      Optional destination to transition to. If invalid the routine resolves a destination from  RoomManager.destination ,  SaveData , or defaults. ResetTransitionData(bool) Returns:  void   Resets all Transition-related data to default values. Parameters bool  : resetDestination =  true      If true the stored  destination  is reset to  Destination.Null . Resets fade routines, callbacks, and  forceFullTransition . EnterRoom(RoomAsset) Returns:  void   Tell the system that the player has officially entered a given room. (Does not handle transitions.) Parameters RoomAsset  : nextRoom     The target room to enter. The current room will be exited (if any) and the given room entered. TransitionStyle (set-only) Type:  TransitionData  (set-only)   Set-only property to quickly and succinctly set or not set all optional Transition-related data in one go. forceFullTransition PreFadeOutAction FadeOutRoutine PostFadeOutAction MidTransitionRoutine PreFadeInAction FadeInRoutine PostFadeInAction Example:"
    },
    "/RageRoosterDocs/documentation/room-folder/destination/": {
        "title": "Destination",
        "text": "# Destination Destination Represents a specific Destination within the game world that can be fed into the  RoomManager , defined with a  RoomAsset  and a  SpawnPoint  ID.   A Serialized equivalent,  DestinationSerial , is also provided for easy saving/loading of Destinations. Base Type: C# struct   Nested Types: (none) Public Fields room Type:  RoomAsset    The target Room of the destination, defined using a  RoomAsset . The appropriate  AreaAsset  can be accessed through  area .    spawnID Type:  int    The ID of the  SpawnPoint  within the Room to spawn at.    area Type:  AreaAsset *(readonly)*    Quick access to the  AreaAsset  the target Room belongs to.    Public Methods IsValid() Returns:   bool    Returns true when the  Destination  has a non-null room and a non-negative spawn ID.    IsNull() Returns:   bool    Returns true when the  Destination  represents the explicit null sentinel (room is null and spawnID is -1).    Equals(object obj) Returns:   bool    Overrides  Equals  to compare area, room and spawnID for value equality.    Parameters object  : obj     The object to compare against.    GetHashCode() Returns:   int    Overrides  GetHashCode  to produce a combined hash for area, room and spawnID.    Static Fields Null Type:  Destination    A sentinel  Destination  representing \"no destination\" ( room = null ,  spawnID = -1 ).    Current Type:  Destination    Easy redirection to the current  Destination  in the active  SaveData  ( SaveData.Current.location ).    Static Methods StartingDefault() Returns:   Destination    Provides a starting default  Destination  using the first area and its first room and spawnID 0.    Comparisons Destination  ==  Destination Returns:   bool    Equality operator comparing area, room and spawnID. Destination  !=  Destination Returns:   bool    Inequality operator (negation of equality). Conversions Destination  ->  bool  (implicit) Implicit conversion to  bool  that returns  true  when  IsValid()  is true.   RoomAsset  room ->  Destination  (implicit) Implicit conversion from a  RoomAsset  to a  Destination  with  spawnID = -1 .    SpawnPoint  ->  Destination  (implicit) Implicit conversion from a  SpawnPoint  to a  Destination  that uses the spawn's root asset and its ID."
    },
    "/RageRoosterDocs/documentation/room-folder/destinationserial/": {
        "title": "DestinationSerial",
        "text": "DestinationSerial A serialized version of  Destination  using basic data types that can be easily saved/loaded. Base Type: C# struct  Public Fields areaName Type:  string    The Display name of the Area. Used to look up the  AreaAsset  through the  AreaRegistry .    roomID Type:  int    The ID of the Room within the Area's list. Used to look up the  RoomAsset  within the  AreaAsset .    spawnID Type:  int    The  SpawnPoint  ID within the Room to spawn at.    Conversions DestinationSerial  ->  JToken  (implicit) Converts the  DestinationSerial  into a  JObject  with keys  area ,  roomID , and  spawnID  for JSON saving.    JToken  ->  DestinationSerial  (implicit) Creates a  DestinationSerial  from a  JToken  by reading  area ,  roomID , and  spawnID  fields.    Destination  ->  DestinationSerial  (explicit) Converts a runtime  Destination  into its serializable form by extracting the area's name, the room index inside the area, and the spawnID.    DestinationSerial  ->  Destination  (explicit) Converts the serial form back into a runtime  Destination  by resolving the  AreaAsset  via  AreaRegistry  and indexing into its rooms. Throws if the area name is invalid or the roomID is out of range."
    },
    "/RageRoosterDocs/documentation/save-system/overview/": {
        "title": "Overview",
        "text": "Overview"
    },
    "/RageRoosterDocs/documentation/save-system/savedata/": {
        "title": "SaveData",
        "text": "SaveData A class tracking saved values across the game. Base Type:  C# Class Interfaces:  ICloneable<SaveData> Nested Types :  SavedPlayerData ,  SavedCollectible ,  IOStream Static Fields current  Type :  SaveData The currently active  SaveData  during Gameplay. deathReloadData Type :  SaveData     The  SaveData  used to reload data after the player experiences a death. IO Type :  IOStream   The active Input/Output Stream for saving data during gameplay. Public Fields location Type :  Destination   playerStats Type :  SavedPlayerStats   powerEggs Type :  SavedCollectible wishbones Type :  SavedCollectible   hensRescued Type :  SavedCollectible   globalChanges Type :  SavedFlagSet   areaChanges Type :  Dictionary< AreaAsset , SavedFlagSet> Public Methods SaveData() Default Constructor , Clones data from default assets. Returns  :  SaveData Remarks: For the love of god, if the  SavedValueRegistry  Scriptable Object is missing from the project, we have a problem. Clone( SaveData ) Deep Clones this object, Creating a new instance or populating the provided instance field. Note: Does not properly populate existing null fields. Use  CloneInto()  instead. Returns  :  SaveData (Implemented for  ICloneable<SaveData> ) Parameters SaveData : target = null Static Methods RevertToDeathData() Reverts the current save data to its state at the time of the last Death Checkpoint. See also:  DeathReloadData() RevertToSaveFile() Reverts the current save data to the data last saved to disk. See also:  IO SaveFileToDisk( Destination ) Saves the current Data to disk. Parameters Destination  : destination The current location of the player, as will be applied to all active  SaveData  objects."
    },
    "/RageRoosterDocs/documentation/save-system/savedata_subs/savedplayerdata/": {
        "title": "SavedPlayerData",
        "text": "SavedPlayerData"
    },
    "/RageRoosterDocs/documentation/save-system/savedata_subs/savedcollectible/": {
        "title": "SavedCollectible",
        "text": "SavedCollectible"
    },
    "/RageRoosterDocs/documentation/save-system/savedata_subs/iostream/": {
        "title": "IOStream",
        "text": "IOStream"
    },
    "/RageRoosterDocs/documentation/save-system/savedflagset/": {
        "title": "SavedFlagSet",
        "text": "SavedFlagSet"
    },
    "/RageRoosterDocs/documentation/save-system/savedvalueregistry/": {
        "title": "SavedValueRegistry",
        "text": "SavedValueRegistry"
    },
    "/RageRoosterDocs/documentation/terminology/": {
        "title": "Terminology",
        "text": "Terminology This page will be used to collect commonly used terminology. Spaces These refer to different spaces that a piece of Data can possibly be defined. \"Asset-Space\" ScriptableObject s defined in the project's assets folder. \"Scene-Space\" MonoBehaviour  scripts defined in a Scene on a GameObject. \"Static-Space\" Global access space accessible from anywhere so long as permissions allow. \"C#-Space\" Data objects created manually at runtime that live in memory and nowhere else."
    }
}